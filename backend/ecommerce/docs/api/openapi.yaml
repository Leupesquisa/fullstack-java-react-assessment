openapi: 3.0.3
info:
  title: E-commerce Monolith API
  description: |
    API documentation for the E-commerce Monolith application.
    This API provides endpoints for managing products, users, carts, and orders.
  version: 1.0.0
  contact:
    name: Development Team
    email: dev@example.com
servers:
  - url: http://localhost:8080
    description: Local development server
  - url: https://api.example.com
    description: Production server
tags:
  - name: products
    description: Product management
  - name: auth
    description: Authentication and user management
  - name: cart
    description: Shopping cart operations
  - name: orders
    description: Order processing
  - name: admin
    description: Administrative operations
paths:
  /api/auth/register:
    post:
      summary: Register a new user
      description: Creates a new user account
      operationId: register
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/login:
    post:
      summary: Authenticate user
      description: Authenticates a user and returns a JWT token
      operationId: login
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/me:
    get:
      summary: Get current user
      description: Returns information about the currently authenticated user
      operationId: getCurrentUser
      tags:
        - auth
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/products:
    get:
      summary: List all products
      description: Returns a paginated list of products
      operationId: getAllProducts
      tags:
        - products
      parameters:
        - name: page
          in: query
          description: Page number (zero-based)
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Page size
          schema:
            type: integer
            default: 20
        - name: sort
          in: query
          description: Sort field and direction (e.g., name,asc)
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageProductResponse'
    post:
      summary: Create a new product
      description: Creates a new product in the catalog
      operationId: createProduct
      tags:
        - products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        '201':
          description: Product created
          headers:
            Location:
              schema:
                type: string
              description: URL of the created product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/products/{id}:
    get:
      summary: Get product by ID
      description: Returns a single product by ID
      operationId: getProductById
      tags:
        - products
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update product
      description: Updates an existing product
      operationId: updateProduct
      tags:
        - products
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete product
      description: Deletes a product
      operationId: deleteProduct
      tags:
        - products
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Product deleted
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    ProductRequest:
      type: object
      required:
        - sku
        - name
        - price
        - stock
      properties:
        sku:
          type: string
          minLength: 3
          maxLength: 50
          example: "PROD-123"
        name:
          type: string
          minLength: 3
          maxLength: 255
          example: "Smartphone X"
        description:
          type: string
          maxLength: 1000
          example: "Latest smartphone with advanced features"
        price:
          type: number
          format: decimal
          minimum: 0
          example: 599.99
        stock:
          type: integer
          minimum: 0
          example: 100
        category:
          type: string
          example: "Electronics"
        imageUrl:
          type: string
          format: uri
          example: "https://example.com/images/smartphone-x.jpg"
    ProductResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        sku:
          type: string
          example: "PROD-123"
        name:
          type: string
          example: "Smartphone X"
        description:
          type: string
          example: "Latest smartphone with advanced features"
        price:
          type: number
          format: decimal
          example: 599.99
        stock:
          type: integer
          example: 100
        category:
          type: string
          example: "Electronics"
        imageUrl:
          type: string
          format: uri
          example: "https://example.com/images/smartphone-x.jpg"
        createdAt:
          type: string
          format: date-time
          example: "2023-01-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-01-02T12:00:00Z"
    PageProductResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ProductResponse'
        pageable:
          type: object
          properties:
            pageNumber:
              type: integer
              example: 0
            pageSize:
              type: integer
              example: 20
            sort:
              type: object
              properties:
                sorted:
                  type: boolean
                  example: true
        totalElements:
          type: integer
          example: 100
        totalPages:
          type: integer
          example: 5
        last:
          type: boolean
          example: false
        first:
          type: boolean
          example: true
        size:
          type: integer
          example: 20
        number:
          type: integer
          example: 0
        numberOfElements:
          type: integer
          example: 20
        empty:
          type: boolean
          example: false
    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          example: "2023-01-01T12:00:00Z"
        status:
          type: integer
          example: 400
        error:
          type: string
          example: "Bad Request"
        message:
          type: string
          example: "Validation failed"
        path:
          type: string
          example: "/api/products"

    UserRegistrationRequest:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          minLength: 6
          example: "password123"
        firstName:
          type: string
          minLength: 2
          maxLength: 50
          example: "John"
        lastName:
          type: string
          minLength: 2
          maxLength: 50
          example: "Doe"

    UserLoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          example: "password123"

    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        email:
          type: string
          format: email
          example: "user@example.com"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        role:
          type: string
          enum: [ROLE_USER, ROLE_ADMIN]
          example: "ROLE_USER"
        createdAt:
          type: string
          format: date-time
          example: "2023-01-01T12:00:00Z"

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          $ref: '#/components/schemas/UserResponse'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
